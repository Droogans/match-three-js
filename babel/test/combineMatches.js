import test from 'ava';
import * as _ from 'lodash';
import {findMatches} from '../src/board';
import {combineMatches} from '../src/board';
import {Board} from '../src/board';
let exampleMatches, correctCombined, multipleMatches;

test.before(() => {
    exampleMatches = [
       [
           [[3, 1], [3, 2], [3, 3]]
       ],
       [
           [[2, 4], [3, 4], [4, 4]]
       ],
       [
           [[4, 1], [4, 2], [4, 3]],
           [[4, 2], [4, 3], [4, 4]]
       ],
       [
           [[1, 3], [2, 3], [3, 3]],
           [[2, 3], [3, 3], [4, 3]]
       ],
       [
           [[2, 0], [2, 1], [2, 2]],
           [[2, 1], [2, 2], [2, 3]],
           [[2, 2], [2, 3], [2, 4]]
       ],
       [
           [[0, 2], [1, 2], [2, 2]],
           [[1, 2], [2, 2], [3, 2]],
           [[2, 2], [3, 2], [4, 2]]
       ],
       [
           [[2, 1], [2, 2], [2, 3]],
           [[1, 2], [2, 2], [3, 2]]
       ],
       [
           [[4, 1], [4, 2], [4, 3]],
           [[2, 1], [3, 1], [4, 1]]
       ],
       [
           [[2, 0], [2, 1], [2, 2]],
           [[2, 1], [2, 2], [2, 3]],
           [[2, 2], [3, 2], [4, 2]]
       ],
       [
           [[2, 1], [2, 2], [2, 3]],
           [[2, 2], [2, 3], [2, 4]],
           [[2, 2], [3, 2], [4, 2]]
       ],
       [
           [[2, 0], [2, 1], [2, 2]],
           [[2, 1], [2, 2], [2, 3]],
           [[2, 2], [2, 3], [2, 4]],
           [[2, 2], [3, 2], [4, 2]]
       ]
    ];
    multipleMatches = [
        [
            [[0, 0], [0, 1], [0, 2]],
            [[3, 4], [4, 4], [5, 4]]
        ],
        [
            [[0, 1], [0, 2], [0, 3]],
            [[0, 2], [0, 3], [0, 4]],
            [[2, 2], [2, 3], [2, 4]],
            [[2, 3], [2, 4], [2, 5]]
        ]
    ];    
});

test('combines matches of 3 to make matches of 4+', t =>{
    correctCombined = [
        [[[3, 1], [3, 2], [3, 3]]],
        [[[2, 4], [3, 4], [4, 4]]],
        [[[4, 1], [4, 2], [4, 3], [4, 4]]],
        [[[1, 3], [2, 3], [3, 3], [4, 3]]],
        [[[2, 0], [2, 1], [2, 2], [2, 3], [2, 4]]],
        [[[0, 2], [1, 2], [2, 2], [3, 2], [4, 2]]],
        [[[1, 2], [2, 1], [2, 2], [2, 3], [3, 2]]],
        [[[2, 1], [3, 1], [4, 1], [4, 2], [4, 3]]],
        [[[2, 0], [2, 1], [2, 2], [2, 3], [3, 2], [4, 2]]],
        [[[2, 1], [2, 2], [2, 3], [2, 4], [3, 2], [4, 2]]],
        [[[2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 2], [4, 2]]]
    ];
    
    _.each(exampleMatches, match => {
        t.true(_.isEqual(combineMatches(match), correctCombined[exampleMatches.indexOf(match)]));
    });
});

test("returns multiple matches if there aren't any overlaps", t => {
    correctCombined = [
        [
            [[0, 0], [0, 1], [0, 2]],
            [[3, 4], [4, 4], [5, 4]]
        ],
        [
            [[0, 1], [0, 2], [0, 3], [0, 4]],
            [[2, 2], [2, 3], [2, 4], [2, 5]]
        ],
    ];
    
    _.each(multipleMatches, match => {
        t.true(_.isEqual(combineMatches(match), correctCombined[multipleMatches.indexOf(match)]))
    });
})
